# -*- coding: utf-8 -*-
"""2702353221_OOP_Model Deployment .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wBhb1UqB73SrVNZBxZsLJ_2453EFA3h3
"""

import numpy as np
import pandas as pd

import pickle
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

class yipee:
    def __init__(self, oe, ohe, xgb, file_path):
        self.oe = oe
        self.ohe = ohe
        self.xgb = xgb
        self.file_path = file_path

        self.data = None
        self.input_df = None
        self.output_df = None
        self.x_train, self.x_test, self.y_train, self.y_test, self.y_predict = [None] * 5
        self.model = None

    def load_data(self):
        self.data = pd.read_csv(self.file_path)

    def create_input_output(self, target_column):
        self.output_df = self.data[target_column]
        self.input_df = self.data.drop(columns=[target_column])

    def split_data(self, test_size=0.2, random_state=42):
        self.x_train, self.x_test, self.y_train, self.y_test = train_test_split(
            self.input_df, self.output_df, test_size=test_size, random_state=random_state
        )

    def impute_median(self):
        for col in ['person_income']:
            self.x_train[col] = self.x_train[col].fillna(self.x_train[col].median())
            self.x_test[col] = self.x_test[col].fillna(self.x_test[col].median())

    def binary_encode(self):
        gender_map = {"Male": 0, "Female": 1, "male": 0, "female": 1}
        default_map = {"No": 0, "Yes": 1}
        self.x_train['person_gender'] = self.x_train['person_gender'].str.lower().map(gender_map)
        self.x_test['person_gender'] = self.x_test['person_gender'].str.lower().map(gender_map)
        self.x_train['previous_loan_defaults_on_file'] = self.x_train['previous_loan_defaults_on_file'].map(default_map)
        self.x_test['previous_loan_defaults_on_file'] = self.x_test['previous_loan_defaults_on_file'].map(default_map)

    def ordinal_encoding(self):
        self.x_train['person_education'] = self.oe.transform(self.x_train[['person_education']])
        self.x_test['person_education'] = self.oe.transform(self.x_test[['person_education']])

    def one_hot_encoding(self, column):
      self.ohe.fit(self.x_train[[column]])

      encoded_train = self.ohe.transform(self.x_train[[column]])
      encoded_test = self.ohe.transform(self.x_test[[column]])

      encoded_train_df = pd.DataFrame(encoded_train, columns=self.ohe.get_feature_names_out([column]), index=self.x_train.index)
      encoded_test_df = pd.DataFrame(encoded_test, columns=self.ohe.get_feature_names_out([column]), index=self.x_test.index)

      self.x_train = self.x_train.drop(column, axis=1).join(encoded_train_df)
      self.x_test = self.x_test.drop(column, axis=1).join(encoded_test_df)

        # self.one_hot_encoders[column] = ohe

    def create_model(self):
        self.model = self.xgb

    def train_model(self):
        self.model.fit(self.x_train, self.y_train)

    def evaluate_model(self):
        y_pred = self.model.predict(self.x_test)
        print(classification_report(self.y_test, y_pred))

file_path = "Dataset_A_loan.csv"

with open("oe.pkl", "rb") as f:
    oe = pickle.load(f)
with open("ohe.pkl", "rb") as f:
    ohe = pickle.load(f)
with open("xgb.pkl", "rb") as f:
    xgb = pickle.load(f)

model = yipee(oe, ohe, xgb, file_path="Dataset_A_loan.csv")
model.load_data()
model.create_input_output(target_column="loan_status")
model.split_data()
model.impute_median()
model.binary_encode()
model.ordinal_encoding()
model.one_hot_encoding("person_home_ownership")
model.one_hot_encoding("loan_intent")
model.create_model()
model.train_model()
model.evaluate_model()

